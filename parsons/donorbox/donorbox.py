from parsons.utilities.api_connector import APIConnector
from parsons.utilities import check_env
from parsons import Table

import logging
import warnings
import datetime

logger = logging.getLogger(__name__)

URI = "https://donorbox.org/api/v1"


class Donorbox(object):
    """
    Instantiate Donorbox class.

       `Args:`
            donorbox_account_email: str
                The email associated with your Donorbox account. Can be passed as
                argument or set as `DONORBOX_ACCOUNT_EMAIL` environment variable.
            donorbox_api_key: str
                The API key generated by Donorbox for your account. Can be passed as
                argument or set as `DONORBOX_API_JEY` environment variable.
    """

    def __init__(self, email=None, api_key=None):
        self.email = check_env.check('DONORBOX_ACCOUNT_EMAIL', email)
        self.api_key = check_env.check('DONORBOX_API_KEY', api_key)
        self.uri = URI
        self.client = APIConnector(self.uri, auth=(self.email, self.api_key))

    def get_campaigns(self, id=None, name=None, order=None):
        """
        Get information on campaigns.

        `Args:`
        id: int or str
            Optional. The ID of the campaign to get. If both id and name are omitted, will return all campaigns.
        name: str
            Optional. The name of the campaign to get. If both id and name are omitted, will return all campaigns.
        order: str
            Optional. Valid values are "asc" and "desc". If not supplied, order is descending by default.

        `Returns`:
            Parsons Table
        """
        params = {"id": id, "order": order, "name": name}
        params = {key: value for key, value in params.items() if value is not None} # filter out Nones
        result = self.client.request("campaigns", "GET", params=params)
        data = result.json()
        return Table(data)

    def get_donations(self, email=None, date_from=None, date_to=None, campaign_name=None, campaign_id=None, 
                      donation_id=None, first_name=None, last_name=None, donor_id=None, amount_min=None, 
                      amount_max=None, order=None):
        """
        Get information on donations.

        `Args:`
        email: str
            Optional. Filter's donations by donor's email
        date_from: str
            Optional. Filters donations to those started on or after the provided date.
            Valid formats: YYYY-mm-dd YYYY/mm/dd YYYYmmdd dd-mm-YYYY
            If an incorrectly formatted date is provided, returns all.
        date_to: str
            Optional. Filters donations to those started before the provided date. (Note, unlike
            date_from, this does not include the provided date.)
            Valid formats: YYYY-mm-dd YYYY/mm/dd YYYYmmdd dd-mm-YYYY
            If an incorrectly formatted date is provided, returns none.
        campaign_name: str
            Optional. Filters by the campaign title that you have defined in Donorbox.
        campaign_id: int or str
            Optional. Filters by Donorbox campaign id.
        donation_id: int or str
            Optional. Filters by Donorbox donations id.
        first_name: str
            Optional. Filters by donor's first name.
        last_name: str
            Optional. Filters by donor's last name.
        donor_id: int or str
            Optional. Filters by Donorbox donor id.
        amount_min: int or str
            Optional. Gets all donations above the provided minimum.
        amount_max: int or str
            Optional. Gets all donations below the provided maximum.
        order: str
            Optional. Valid values are "asc" and "desc". If not supplied, order is descending by default.

        `Returns`:
            Parsons Table
        """

        params = {
            "email": email, "date_from": date_from, "date_to": date_to, "campaign_name": campaign_name,
            "campaign_id": campaign_id, "id": donation_id, "first_name": first_name,
            "last_name": last_name, "donor_id": donor_id, "amount[usd][min]": amount_min, 
            "amount[usd][max]": amount_max, "order": order
        }
        params = {key: value for key, value in params.items() if value is not None} # filter out Nones
        result = self.client.request("donations", "GET", params=params)
        data = result.json()
        return Table(data)

    def get_donors(self, donor_id=None, first_name=None, last_name=None, donor_name=None, email=None, 
                   order=None):
        """
        Get information on donors.

        `Args:`

        donor_id: str or int
            Optional. Filters by donor ID.
        first_name: str
            Optional. Filters by donor's first name.
        last_name: str
            Optional. Filters by donor's last name.
        donor_name: str
            Optional. Filter by donor's full name
        email: str
            Optional. Filter's donations by donor's email        
        order: str
            Optional. Valid values are "asc" and "desc". If not supplied, order is descending by default.

        `Returns`:
            Parsons Table
        """
        params = {
            "id": donor_id, "first_name": first_name, "last_name": last_name, "donor_name": donor_name,
            "email": email, "order": order
        }
        params = {key: value for key, value in params.items() if value is not None} # filter out Nones
        result = self.client.request("donors", "GET", params=params)
        data = result.json()
        return Table(data)

    def get_plans(self, email=None, date_from=None, date_to=None, campaign_id=None, campaign_name=None, 
                  donor_id=None, first_name=None, last_name=None, donor_name=None, order=None):
        """
        Get information on plans.

        `Args:`

        email: str
            Optional. Filter's plans by donor's email address.   
        date_from: str
            Optional. Filters plans  to those started on or after the provided date.
            Valid formats: YYYY-mm-dd YYYY/mm/dd YYYYmmdd dd-mm-YYYY
            If an incorrectly formatted date is provided, returns all.
        date_to: str
            Optional. Filters plans to those started before the provided date. (Note, unlike
            date_from, this does not include the provided date.)
            Valid formats: YYYY-mm-dd YYYY/mm/dd YYYYmmdd dd-mm-YYYY
            If an incorrectly formatted date is provided, returns none.
        campaign_id: int or str
            Optional. Filters by Donorbox campaign id.
        campaign_name: str
            Optional. Filters by the campaign title that you have defined in Donorbox.            
        donor_id: str or int
            Optional. Filters by donor ID.
        first_name: str
            Optional. Filters by donor's first name.
        last_name: str
            Optional. Filters by donor's last name.
        donor_name: str
            Optional. Filter by donor's full name
        order: str
            Optional. Valid values are "asc" and "desc". If not supplied, order is descending by default.

        `Returns`:
            Parsons Table
        """
        params = {
            "email": email, "date_from": date_from, "date_to": date_to, "campaign_id": campaign_id, 
            "campaign_name": campaign_name, "donor_id": donor_id, "first_name": first_name,
            "last_name": last_name, "donor_name": donor_name, "order": order
        }
        params = {key: value for key, value in params.items() if value is not None} # filter out Nones
        result = self.client.request("plans", "GET", params=params)
        data = result.json()
        return Table(data)

    def _date_format_helper(self, date_string):
        """Checks date format and warns if invalid (internal)

        Valid formats: YYYY-mm-dd YYYY/mm/dd YYYYmmdd dd-mm-YYYY

        date_string: str
            Required. Date in a string format to be checked against Donorbox's valid options.

        `Returns`: None
        """
        valid_formats = ['%Y-%m-%d', '%d-%m-%Y', '%Y/%m/%d', '%Y%m%d']
        for str_format in valid_formats:
            try:
                datetime.datetime.strptime(date_string, str_format)
                return
            except ValueError:
                continue
        warnings.warn(f"The date you supplied, {date_string}, is not a valid Donorbox format. Try " +
                        "one of the following formats: YYYY-mm-dd YYYY/mm/dd YYYYmmdd dd-mm-YYYY")




